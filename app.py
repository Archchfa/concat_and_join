import streamlit as st
import pandas as pd
from io import BytesIO

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ CSV —Ñ–∞–π–ª–æ–≤", layout="wide")

st.title("üìä –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ CSV —Ñ–∞–π–ª–æ–≤")

# –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
st.markdown("<style>div[data-testid='stNotification'] {display: none;}</style>", unsafe_allow_html=True)

# --- –§—É–Ω–∫—Ü–∏–∏ ---
def load_csv(uploaded_file):
    return pd.read_csv(uploaded_file)

def detect_column_type(series):
    try:
        pd.to_datetime(series)
        return "datetime"
    except (ValueError, TypeError):
        try:
            pd.to_numeric(series)
            return "numeric"
        except ValueError:
            return "string"

def filter_dataframe():
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", type="csv", key="filter_file")
    if uploaded_file:
        df = load_csv(uploaded_file)
        filters = []
        operators = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤

        add_condition = True
        while add_condition:
            # –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–∞
            column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü", df.columns, key=f"column_{len(filters)}")
            col_type = detect_column_type(df[column])

            if col_type == "datetime":
                df[column] = pd.to_datetime(df[column], errors='coerce')
                min_date, max_date = pd.to_datetime(df[column].min()), pd.to_datetime(df[column].max())
                start, end = st.date_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç", [min_date, max_date], key=f"date_{len(filters)}")
                filters.append((df[column] >= pd.to_datetime(start)) & (df[column] <= pd.to_datetime(end)))
            elif col_type == "numeric":
                condition = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ", ["=", "<", ">", "<=", ">="], key=f"condition_{len(filters)}")
                value = st.text_input(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {column}", key=f"value_{len(filters)}")
                if value:
                    try:
                        value = float(value)
                        if condition == "=":
                            filters.append(df[column] == value)
                        elif condition == "<":
                            filters.append(df[column] < value)
                        elif condition == ">":
                            filters.append(df[column] > value)
                        elif condition == "<=":
                            filters.append(df[column] <= value)
                        elif condition == ">=":
                            filters.append(df[column] >= value)
                    except ValueError:
                        st.warning(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {column}")
            else:
                selected = st.multiselect(f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è {column}", sorted(df[column].dropna().unique().astype(str)), key=f"selected_{len(filters)}")
                filters.append(df[column].astype(str).isin(selected))

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            if len(filters) > 1:
                logic_op = st.selectbox("–õ–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä", ["–ò", "–ò–õ–ò"], index=0, key=f"logic_{len(filters)}")
                operators.append(logic_op)

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—Å–ª–æ–≤–∏—è
            add_condition = st.button("–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ", key=f"add_condition_{len(filters)}")
            if not add_condition:
                break

        if filters:
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º
            combined_filter = filters[0]
            for i in range(1, len(filters)):
                if operators[i-1] == "–ò":
                    combined_filter &= filters[i]
                else:
                    combined_filter |= filters[i]

            return df[combined_filter]

        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —É—Å–ª–æ–≤–∏—è")
    return None

def download_link(df, filename="—Ä–µ–∑—É–ª—å—Ç–∞—Ç.csv"):
    buffer = BytesIO()
    df.to_csv(buffer, index=False)
    buffer.seek(0)
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", buffer, file_name=filename, mime="text/csv")

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---
st.sidebar.header("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
option = st.sidebar.radio("", [
    "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
    "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫"
])

if option == "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö":
    filtered_df = filter_dataframe()
    if filtered_df is not None:
        st.dataframe(filtered_df)
        st.session_state['filtered'] = filtered_df
        download_link(filtered_df, "–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ.csv")

elif option == "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫":
    if 'filtered' in st.session_state:
        df = st.session_state['filtered']
        st.subheader("üìà –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞")
        chart_type = st.selectbox("–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞", ["–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", "–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞"])
        x_col = st.selectbox("–û—Å—å X (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)", df.columns)
        y_col = st.selectbox("–û—Å—å Y (–∑–Ω–∞—á–µ–Ω–∏—è)", df.columns) if chart_type != "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞" else None

        color_col = st.selectbox("–¶–≤–µ—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", df.columns) if chart_type not in ["–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞"] else None
        agg_type = st.selectbox("–¢–∏–ø –∞–≥—Ä–µ–≥–∞—Ü–∏–∏", ["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö", "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"])

        if agg_type == "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö":
            data = df.groupby(x_col)[y_col].nunique().reset_index(name="–ó–Ω–∞—á–µ–Ω–∏–µ") if y_col else df[x_col].value_counts().reset_index(name="–ó–Ω–∞—á–µ–Ω–∏–µ")
        else:
            data = df.groupby(x_col)[y_col].count().reset_index(name="–ó–Ω–∞—á–µ–Ω–∏–µ") if y_col else df[x_col].value_counts().reset_index(name="–ó–Ω–∞—á–µ–Ω–∏–µ")

        fig = None
        if chart_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
            fig = px.histogram(df, x=x_col)
        elif chart_type == "–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞":
            fig = px.bar(data, x=x_col, y="–ó–Ω–∞—á–µ–Ω–∏–µ", color=color_col)
        elif chart_type == "–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫":
            fig = px.line(data, x=x_col, y="–ó–Ω–∞—á–µ–Ω–∏–µ", color=color_col)
        elif chart_type == "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞":
            fig = px.pie(data, names="index" if "index" in data.columns else x_col, values="–ó–Ω–∞—á–µ–Ω–∏–µ")

        if fig:
            st.plotly_chart(fig, use_container_width=True)
