import streamlit as st
import pandas as pd
from io import BytesIO
import time
import streamlit.components.v1 as components

st.set_page_config(page_title="–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ CSV", layout="centered")
st.title("‚ú® –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ CSV-—Ñ–∞–π–ª–æ–≤")

# –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
components.html("""
    <style>
        h1 {
            animation: glow 1.5s infinite alternate;
        }
        @keyframes glow {
            from { text-shadow: 0 0 10px #00c3ff; }
            to { text-shadow: 0 0 20px #00c3ff, 0 0 30px #00c3ff; }
        }
    </style>
""", height=0)

uploaded_files = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è", 
    type="csv", 
    accept_multiple_files=True
)

output_filename = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)", value="combined")

combined_df = None

if uploaded_files and output_filename:
    dfs = []
    for file in uploaded_files:
        try:
            df = pd.read_csv(file)
            dfs.append(df)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file.name}: {e}")

    if dfs:
        with st.spinner("üîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤..."):
            combined_df = pd.concat(dfs, ignore_index=True)
            time.sleep(1.5)

        st.balloons()
        st.success("‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã!")
        st.dataframe(combined_df.head())

        buffer = BytesIO()
        combined_df.to_csv(buffer, index=False)
        buffer.seek(0)

        st.download_button(
            label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π CSV",
            data=buffer,
            file_name=f"{output_filename}.csv",
            mime="text/csv"
        )

# --- –ù–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª: –ü–æ–∏—Å–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π ---
if combined_df is not None:
    st.header("üîç –ò—â–µ–º –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏—è")
    new_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", type="csv", key="compare")

    if new_file is not None:
        try:
            compare_df = pd.read_csv(new_file)
            st.success("–§–∞–π–ª –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")

            col1 = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –∏–∑ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞", combined_df.columns)
            col2 = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞", compare_df.columns)

            if st.button("üîé –ù–∞–π—Ç–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è"):
                intersection_values = pd.Series(list(set(combined_df[col1]) & set(compare_df[col2])))
                percent = len(intersection_values) / len(compare_df[col2].dropna()) * 100
                st.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(intersection_values)} –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π ‚Äî —ç—Ç–æ {percent:.2f}% –æ—Ç —Å—Ç–æ–ª–±—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")

                # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è–º–∏
                filtered_df = compare_df[compare_df[col2].isin(intersection_values)]
                st.dataframe(filtered_df.head())

                result_buffer = BytesIO()
                filtered_df.to_csv(result_buffer, index=False)
                result_buffer.seek(0)

                st.download_button(
                    label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è–º–∏",
                    data=result_buffer,
                    file_name="intersected_rows.csv",
                    mime="text/csv"
                )

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
