import streamlit as st
import pandas as pd
import plotly.express as px
from io import BytesIO

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ CSV —Ñ–∞–π–ª–æ–≤", layout="wide")

st.title("üìä –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ CSV —Ñ–∞–π–ª–æ–≤")

# –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
st.markdown("<style>div[data-testid='stNotification'] {display: none;}</style>", unsafe_allow_html=True)

# --- –§—É–Ω–∫—Ü–∏–∏ ---
def load_csv(uploaded_file):
    return pd.read_csv(uploaded_file)

def merge_files(files):
    dfs = [load_csv(file) for file in files]
    return pd.concat(dfs, ignore_index=True)

def detect_column_type(series):
    try:
        pd.to_datetime(series)
        return "datetime"
    except (ValueError, TypeError):
        try:
            pd.to_numeric(series)
            return "numeric"
        except ValueError:
            return "string"

def filter_dataframe():
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", type="csv", key="filter_file")
    if uploaded_file:
        df = load_csv(uploaded_file)
        filter_conditions = []
        logic_ops = []

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π
        add_condition = st.button("–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ")
        
        if 'filter_blocks' not in st.session_state:
            st.session_state['filter_blocks'] = []

        if add_condition:
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –±–ª–æ–∫–∏ —É—Å–ª–æ–≤–∏–π –≤ —Å–µ—Å—Å–∏–∏
            st.session_state['filter_blocks'].append({
                'column': st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", df.columns),
                'operation': st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä", ["=", "<", ">", "<=", ">="]),
                'value': st.text_input("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É—Å–ª–æ–≤–∏—è"),
            })

        for block in st.session_state['filter_blocks']:
            column = block['column']
            operation = block['operation']
            value = block['value']
            if value:
                col_type = detect_column_type(df[column])

                if col_type == "numeric" and value.replace('.', '', 1).isdigit():
                    value = float(value)

                if operation == "=":
                    filter_conditions.append(df[column] == value)
                elif operation == "<":
                    filter_conditions.append(df[column] < value)
                elif operation == ">":
                    filter_conditions.append(df[column] > value)
                elif operation == "<=":
                    filter_conditions.append(df[column] <= value)
                elif operation == ">=":
                    filter_conditions.append(df[column] >= value)

        # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π —Å –ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
        if filter_conditions:
            logic_op = st.selectbox("–õ–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π", ["–ò", "–ò–õ–ò"], index=0)
            if logic_op == "–ò":
                df_filtered = df[pd.concat(filter_conditions, axis=1).all(axis=1)]
            else:
                df_filtered = df[pd.concat(filter_conditions, axis=1).any(axis=1)]
            st.dataframe(df_filtered)
            return df_filtered

    return None

def download_link(df, filename="—Ä–µ–∑—É–ª—å—Ç–∞—Ç.csv"):
    buffer = BytesIO()
    df.to_csv(buffer, index=False)
    buffer.seek(0)
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", buffer, file_name=filename, mime="text/csv")

def plot_data(df):
    st.subheader("üìà –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞")
    
    chart_type = st.selectbox("–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞", ["–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", "–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞"])
    x_col = st.selectbox("–û—Å—å X (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)", df.columns)
    y_col = st.selectbox("–û—Å—å Y (–∑–Ω–∞—á–µ–Ω–∏—è)", df.columns) if chart_type != "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞" else None
    
    # –î–æ–±–∞–≤–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    color_col = st.selectbox("–¶–≤–µ—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", df.columns) if chart_type not in ["–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞"] else None
    agg_type = st.selectbox("–¢–∏–ø –∞–≥—Ä–µ–≥–∞—Ü–∏–∏", ["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö", "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"])

    if agg_type == "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö":
        data = df.groupby(x_col)[y_col].nunique().reset_index(name="–ó–Ω–∞—á–µ–Ω–∏–µ") if y_col else df[x_col].value_counts().reset_index(name="–ó–Ω–∞—á–µ–Ω–∏–µ")
    else:
        data = df.groupby(x_col)[y_col].count().reset_index(name="–ó–Ω–∞—á–µ–Ω–∏–µ") if y_col else df[x_col].value_counts().reset_index(name="–ó–Ω–∞—á–µ–Ω–∏–µ")

    fig = None
    if chart_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
        fig = px.histogram(df, x=x_col)
    elif chart_type == "–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞":
        fig = px.bar(data, x=x_col, y="–ó–Ω–∞—á–µ–Ω–∏–µ", color=color_col)
    elif chart_type == "–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫":
        fig = px.line(data, x=x_col, y="–ó–Ω–∞—á–µ–Ω–∏–µ", color=color_col)
    elif chart_type == "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞":
        fig = px.pie(data, names="index" if "index" in data.columns else x_col, values="–ó–Ω–∞—á–µ–Ω–∏–µ")

    if fig:
        st.plotly_chart(fig, use_container_width=True)

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---
st.sidebar.header("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
option = st.sidebar.radio("", [
    "–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ñ–∞–π–ª—ã",
    "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
    "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫",
    "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"
])

if option == "–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ñ–∞–π–ª—ã":
    uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è", type="csv", accept_multiple_files=True)
    if uploaded_files:
        merged_df = merge_files(uploaded_files)
        st.dataframe(merged_df)
        st.session_state['data'] = merged_df
        download_link(merged_df, "–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ_—Ñ–∞–π–ª—ã.csv")

elif option == "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö":
    filtered_df = filter_dataframe()
    if filtered_df is not None:
        st.dataframe(filtered_df)
        st.session_state['filtered'] = filtered_df
        download_link(filtered_df, "–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ.csv")

elif option == "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫":
    if 'filtered' in st.session_state:
        plot_data(st.session_state['filtered'])
    elif 'data' in st.session_state:
        plot_data(st.session_state['data'])
    else:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")

elif option == "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞":
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", type="csv")
    if uploaded_file:
        df = load_csv(uploaded_file)
        plot_data(df)
