import streamlit as st
import pandas as pd
import plotly.express as px
from io import BytesIO

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ CSV —Ñ–∞–π–ª–æ–≤", layout="wide")
st.title("üìä –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ CSV —Ñ–∞–π–ª–æ–≤")
st.markdown("<style>div[data-testid='stNotification'] {display: none;}</style>", unsafe_allow_html=True)

def load_csv(uploaded_file):
    try:
        df = pd.read_csv(uploaded_file, sep=None, engine='python', encoding='utf-8')
        df.columns = df.columns.str.strip()
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {uploaded_file.name}: {e}")
        return pd.DataFrame()

def merge_files(files, merge_on):
    dfs = []
    columns_set = None

    for file in files:
        df = load_csv(file)
        if df.empty or merge_on not in df.columns:
            st.warning(f"–§–∞–π–ª {file.name} –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ '{merge_on}')")
            continue

        if columns_set is None:
            columns_set = set(df.columns)
        else:
            df = df[[col for col in df.columns if col in columns_set or col == merge_on]]

        dfs.append(df)

    if len(dfs) < 2:
        st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
        return pd.DataFrame()

    merged_df = dfs[0]
    for df in dfs[1:]:
        merged_df = pd.merge(merged_df, df, on=merge_on, how="outer", suffixes=('', '_dup'))
        merged_df = merged_df.loc[:, ~merged_df.columns.str.endswith('_dup')]

    merged_df = merged_df.loc[:, ~merged_df.columns.str.fullmatch(r'Unnamed.*')]
    return merged_df

def detect_column_type(series):
    try:
        pd.to_datetime(series)
        return "datetime"
    except (ValueError, TypeError):
        try:
            pd.to_numeric(series)
            return "numeric"
        except ValueError:
            return "string"

def filter_dataframe():
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", type="csv", key="filter_file")
    if uploaded_file:
        df = load_csv(uploaded_file)
        search_type = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:", ["–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏", "–ü–æ —É—Å–ª–æ–≤–∏—é"])

        if search_type == "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
            column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –ø–æ–∏—Å–∫–∞", df.columns)
            col_type = detect_column_type(df[column])
            if col_type == "string":
                selected = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è", sorted(df[column].dropna().unique().astype(str)))
                return df[df[column].astype(str).isin(selected)]
            else:
                values = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:").split(',')
                values = [v.strip() for v in values if v.strip()]
                return df[df[column].astype(str).isin(values)]

        elif search_type == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏":
            uploaded = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏", type="csv", key="value_file")
            if uploaded:
                value_df = load_csv(uploaded)
                value_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏", value_df.columns)
                target_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ", df.columns)
                return df[df[target_col].astype(str).isin(value_df[value_col].astype(str))]

        elif search_type == "–ü–æ —É—Å–ª–æ–≤–∏—é":
            column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü", df.columns)
            col_type = detect_column_type(df[column])
            df[column] = df[column].copy()

            if col_type == "datetime":
                df[column] = pd.to_datetime(df[column], errors='coerce')
                min_date, max_date = pd.to_datetime(df[column].min()), pd.to_datetime(df[column].max())
                start, end = st.date_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç", [min_date, max_date])
                return df[(df[column] >= pd.to_datetime(start)) & (df[column] <= pd.to_datetime(end))]

            elif col_type == "numeric":
                operator = st.selectbox("–û–ø–µ—Ä–∞—Ç–æ—Ä", ["=", "<", ">", "<=", ">="])
                value = st.text_input("–ó–Ω–∞—á–µ–Ω–∏–µ")
                if value:
                    try:
                        value = float(value)
                        return df[eval(f"df[column] {operator} value")]
                    except:
                        st.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                return df

            else:
                selected = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è", sorted(df[column].dropna().unique().astype(str)))
                return df[df[column].astype(str).isin(selected)]

        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —É—Å–ª–æ–≤–∏—è")
    return None

def download_link(df, filename="—Ä–µ–∑—É–ª—å—Ç–∞—Ç.csv"):
    buffer = BytesIO()
    df.to_csv(buffer, index=False)
    buffer.seek(0)
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", buffer, file_name=filename, mime="text/csv")

def plot_data(df):
    st.subheader("üìà –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞")
    chart_type = st.selectbox("–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞", ["–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", "–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞"])
    
    group_columns = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏", df.columns)
    value_column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏", df.select_dtypes(include='number').columns)
    agg_func = st.selectbox("–¢–∏–ø –∞–≥—Ä–µ–≥–∞—Ü–∏–∏", ["–°—É–º–º–∞", "–°—Ä–µ–¥–Ω–µ–µ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"])

    if group_columns and value_column:
        if agg_func == "–°—É–º–º–∞":
            data = df.groupby(group_columns)[value_column].sum().reset_index(name="–ó–Ω–∞—á–µ–Ω–∏–µ")
        elif agg_func == "–°—Ä–µ–¥–Ω–µ–µ":
            data = df.groupby(group_columns)[value_column].mean().reset_index(name="–ó–Ω–∞—á–µ–Ω–∏–µ")
        else:
            data = df.groupby(group_columns)[value_column].count().reset_index(name="–ó–Ω–∞—á–µ–Ω–∏–µ")
    else:
        st.warning("–ù–µ –≤—ã–±—Ä–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
        return

    color_col = None
    if len(group_columns) > 1:
        color_col = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ü–≤–µ—Ç–∞ (–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–≤–µ—Ç—É)", group_columns)

    fig = None
    if chart_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
        fig = px.histogram(data, x=group_columns[0], y="–ó–Ω–∞—á–µ–Ω–∏–µ", color=color_col)
    elif chart_type == "–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞":
        fig = px.bar(data, x=group_columns[0], y="–ó–Ω–∞—á–µ–Ω–∏–µ", color=color_col)
    elif chart_type == "–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫":
        fig = px.line(data, x=group_columns[0], y="–ó–Ω–∞—á–µ–Ω–∏–µ", color=color_col)
    elif chart_type == "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞":
        fig = px.pie(data, names=group_columns[0], values="–ó–Ω–∞—á–µ–Ω–∏–µ")

    if fig:
        st.plotly_chart(fig, use_container_width=True)

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.sidebar.header("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
option = st.sidebar.radio("", [
    "–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ñ–∞–π–ª—ã",
    "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
    "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫",
    "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"
])

if option == "–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ñ–∞–π–ª—ã":
    uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª—ã", type="csv", accept_multiple_files=True)
    if uploaded_files:
        sample_df = load_csv(uploaded_files[0])
        merge_column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è", sample_df.columns)
        if merge_column:
            merged_df = merge_files(uploaded_files, merge_column)
            st.dataframe(merged_df)
            st.session_state['data'] = merged_df
            download_link(merged_df, "–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ_—Ñ–∞–π–ª—ã.csv")

elif option == "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö":
    filtered_df = filter_dataframe()
    if filtered_df is not None:
        st.dataframe(filtered_df)
        st.session_state['filtered'] = filtered_df
        download_link(filtered_df, "–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ.csv")

elif option == "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫":
    if 'filtered' in st.session_state:
        plot_data(st.session_state['filtered'])
    elif 'data' in st.session_state:
        plot_data(st.session_state['data'])
    else:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")

elif option == "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞":
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª", type="csv")
    if uploaded_file:
        df = load_csv(uploaded_file)
        plot_data(df)
