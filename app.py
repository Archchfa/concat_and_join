import streamlit as st
import pandas as pd
import plotly.express as px
from io import BytesIO

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ CSV —Ñ–∞–π–ª–æ–≤", layout="wide")
st.title("üìä –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ CSV —Ñ–∞–π–ª–æ–≤")

def load_csv(uploaded_file):
    try:
        df = pd.read_csv(uploaded_file, sep=None, engine='python', encoding='utf-8', header=None)
        df.columns = df.columns.astype(str).str.strip()
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {uploaded_file.name}: {e}")
        return pd.DataFrame()

def merge_files(files):
    if len(files) != 2:
        st.error("‚ùå –î–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ–≤–Ω–æ 2 —Ñ–∞–π–ª–∞")
        return pd.DataFrame()

    df1 = load_csv(files[0])
    df2 = load_csv(files[1])

    if df1.empty or df2.empty:
        st.warning("–û–¥–∏–Ω –∏–∑ —Ñ–∞–π–ª–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return pd.DataFrame()

    st.write(f"–§–∞–π–ª 1: {files[0].name}")
    merge_col_1 = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞:", df1.columns, key="merge_col_1")

    st.write(f"–§–∞–π–ª 2: {files[1].name}")
    merge_col_2 = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–∞–π–ª–∞:", df2.columns, key="merge_col_2")

    df1[merge_col_1] = df1[merge_col_1].astype(str)
    df2[merge_col_2] = df2[merge_col_2].astype(str)

    df1 = df1.rename(columns={merge_col_1: "_merge_key"})
    df2 = df2.rename(columns={merge_col_2: "_merge_key"})

    result = pd.merge(df1, df2, on="_merge_key", how="inner", suffixes=('', '_dup'))
    result = result.loc[:, ~result.columns.str.endswith('_dup')]
    result = result.loc[:, ~result.columns.str.fullmatch(r'Unnamed.*')]
    result = result.rename(columns={"_merge_key": f"{merge_col_1}/{merge_col_2}"})

    return result

def download_link(df, filename="—Ä–µ–∑—É–ª—å—Ç–∞—Ç.csv"):
    buffer = BytesIO()
    df.to_csv(buffer, index=False)
    buffer.seek(0)
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", buffer, file_name=filename, mime="text/csv")

st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
option = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", ["–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ñ–∞–π–ª—ã"], key="menu_option")

if option == "–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ñ–∞–π–ª—ã":
    uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ 2 CSV —Ñ–∞–π–ª–∞", type="csv", accept_multiple_files=True)
    if uploaded_files:
        merged_df = merge_files(uploaded_files)
        if not merged_df.empty:
            st.dataframe(merged_df)
            download_link(merged_df, "–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ_—Ñ–∞–π–ª—ã.csv")
