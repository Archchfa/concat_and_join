import streamlit as st
import pandas as pd
import plotly.express as px
from io import BytesIO

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ CSV —Ñ–∞–π–ª–æ–≤", layout="wide")

st.title("üìä –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ CSV —Ñ–∞–π–ª–æ–≤")

# –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
st.markdown("<style>div[data-testid='stNotification'] {display: none;}</style>", unsafe_allow_html=True)

# --- –§—É–Ω–∫—Ü–∏–∏ ---
def load_csv(uploaded_file):
    return pd.read_csv(uploaded_file)

def merge_files(files):
    dfs = [load_csv(file) for file in files]
    return pd.concat(dfs, ignore_index=True)

def detect_column_type(series):
    try:
        pd.to_datetime(series)
        return "datetime"
    except (ValueError, TypeError):
        try:
            pd.to_numeric(series)
            return "numeric"
        except ValueError:
            return "string"

def filter_dataframe():
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", type="csv", key="filter_file")
    if uploaded_file:
        df = load_csv(uploaded_file)
        search_type = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:", ["–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏", "–ü–æ —É—Å–ª–æ–≤–∏—é"])

        if search_type == "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
            column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –ø–æ–∏—Å–∫–∞", df.columns)
            col_type = detect_column_type(df[column])
            if col_type == "string":
                selected = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è", sorted(df[column].dropna().unique().astype(str)))
                return df[df[column].astype(str).isin(selected)]
            else:
                values = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:").split(',')
                values = [v.strip() for v in values if v.strip()]
                return df[df[column].astype(str).isin(values)]

        elif search_type == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏":
            uploaded = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏", type="csv", key="value_file")
            if uploaded:
                value_df = load_csv(uploaded)
                value_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏", value_df.columns)
                target_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ", df.columns)
                return df[df[target_col].astype(str).isin(value_df[value_col].astype(str))]

        elif search_type == "–ü–æ —É—Å–ª–æ–≤–∏—é":
            filters = []
            logic_op = "–ò"  # –ù–∞—á–∞–ª—å–Ω—ã–π –ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä
            add_condition = True

            while add_condition:
                column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü", df.columns, key=f"column_{len(filters)}")
                col_type = detect_column_type(df[column])

                if col_type == "datetime":
                    df[column] = pd.to_datetime(df[column], errors='coerce')
                    min_date, max_date = pd.to_datetime(df[column].min()), pd.to_datetime(df[column].max())
                    start, end = st.date_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç", [min_date, max_date], key=f"date_{len(filters)}")
                    filters.append((df[column] >= pd.to_datetime(start)) & (df[column] <= pd.to_datetime(end)))
                elif col_type == "numeric":
                    condition = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ", ["=", "<", ">", "<=", ">="], key=f"condition_{len(filters)}")
                    value = st.text_input(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {column}", key=f"value_{len(filters)}")
                    if value:
                        try:
                            value = float(value)
                            if condition == "=":
                                filters.append(df[column] == value)
                            elif condition == "<":
                                filters.append(df[column] < value)
                            elif condition == ">":
                                filters.append(df[column] > value)
                            elif condition == "<=":
                                filters.append(df[column] <= value)
                            elif condition == ">=":
                                filters.append(df[column] >= value)
                        except ValueError:
                            st.warning(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {column}")
                else:
                    selected = st.multiselect(f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è {column}", sorted(df[column].dropna().unique().astype(str)), key=f"selected_{len(filters)}")
                    filters.append(df[column].astype(str).isin(selected))

                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Å–ª–æ–≤–∏—è
                logic_op = st.selectbox("–õ–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä", ["–ò", "–ò–õ–ò"], index=0, key=f"logic_{len(filters)}")

                add_condition = st.button("–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ", key=f"add_condition_{len(filters)}")
                if not add_condition:
                    break

            if filters:
                if logic_op == "–ò":
                    return df[pd.concat(filters, axis=1).all(axis=1)]
                else:
                    return df[pd.concat(filters, axis=1).any(axis=1)]

        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —É—Å–ª–æ–≤–∏—è")
    return None

def download_link(df, filename="—Ä–µ–∑—É–ª—å—Ç–∞—Ç.csv"):
    buffer = BytesIO()
    df.to_csv(buffer, index=False)
    buffer.seek(0)
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", buffer, file_name=filename, mime="text/csv")

def plot_data(df):
    st.subheader("üìà –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞")
    
    chart_type = st.selectbox("–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞", ["–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", "–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞"])
    x_col = st.selectbox("–û—Å—å X (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)", df.columns)
    y_col = st.selectbox("–û—Å—å Y (–∑–Ω–∞—á–µ–Ω–∏—è)", df.columns) if chart_type != "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞" else None
    
    # –î–æ–±–∞–≤–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    color_col = st.selectbox("–¶–≤–µ—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", df.columns) if chart_type not in ["–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞"] else None
    agg_type = st.selectbox("–¢–∏–ø –∞–≥—Ä–µ–≥–∞—Ü–∏–∏", ["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö", "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"])

    if agg_type == "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö":
        data = df.groupby(x_col)[y_col].nunique().reset_index(name="–ó–Ω–∞—á–µ–Ω–∏–µ") if y_col else df[x_col].value_counts().reset_index(name="–ó–Ω–∞—á–µ–Ω–∏–µ")
    else:
        data = df.groupby(x_col)[y_col].count().reset_index(name="–ó–Ω–∞—á–µ–Ω–∏–µ") if y_col else df[x_col].value_counts().reset_index(name="–ó–Ω–∞—á–µ–Ω–∏–µ")

    fig = None
    if chart_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
        fig = px.histogram(df, x=x_col)
    elif chart_type == "–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞":
        fig = px.bar(data, x=x_col, y="–ó–Ω–∞—á–µ–Ω–∏–µ", color=color_col)
    elif chart_type == "–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫":
        fig = px.line(data, x=x_col, y="–ó–Ω–∞—á–µ–Ω–∏–µ", color=color_col)
    elif chart_type == "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞":
        fig = px.pie(data, names="index" if "index" in data.columns else x_col, values="–ó–Ω–∞—á–µ–Ω–∏–µ")

    if fig:
        st.plotly_chart(fig, use_container_width=True)

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---
st.sidebar.header("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
option = st.sidebar.radio("", [
    "–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ñ–∞–π–ª—ã",
    "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
    "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫",
    "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"
])

if option == "–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ñ–∞–π–ª—ã":
    uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è", type="csv", accept_multiple_files=True)
    if uploaded_files:
        merged_df = merge_files(uploaded_files)
        st.dataframe(merged_df)
        st.session_state['data'] = merged_df
        download_link(merged_df, "–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ_—Ñ–∞–π–ª—ã.csv")

elif option == "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö":
    filtered_df = filter_dataframe()
    if filtered_df is not None:
        st.dataframe(filtered_df)
        st.session_state['filtered'] = filtered_df
        download_link(filtered_df, "–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ.csv")

elif option == "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫":
    if 'filtered' in st.session_state:
        plot_data(st.session_state['filtered'])
    elif 'data' in st.session_state:
        plot_data(st.session_state['data'])
    else:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")

elif option == "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞":
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", type="csv")
    if uploaded_file:
        df = load_csv(uploaded_file)
        plot_data(df)
