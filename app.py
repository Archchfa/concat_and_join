import streamlit as st
import pandas as pd
import plotly.express as px
from io import BytesIO

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ CSV —Ñ–∞–π–ª–æ–≤", layout="wide")
st.title("üìä –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ CSV —Ñ–∞–π–ª–æ–≤")

def load_csv(uploaded_file):
    try:
        df = pd.read_csv(uploaded_file, sep=None, engine='python', encoding='utf-8', header=None)
        new_header = df.iloc[0].astype(str).str.strip()
        new_header = [col if col and col != 'nan' else f"unknown_{i}" for i, col in enumerate(new_header)]
        seen = {}
        unique_header = []
        for col in new_header:
            if col not in seen:
                seen[col] = 0
                unique_header.append(col)
            else:
                seen[col] += 1
                unique_header.append(f"{col}_{seen[col]}")
        df = df[1:].reset_index(drop=True)
        df.columns = unique_header
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {uploaded_file.name}: {e}")
        return pd.DataFrame()

def merge_files(files):
    if len(files) != 2:
        st.error("‚ùå –î–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ–≤–Ω–æ 2 —Ñ–∞–π–ª–∞")
        return pd.DataFrame()

    df1 = load_csv(files[0])
    df2 = load_csv(files[1])

    if df1.empty or df2.empty:
        st.warning("–û–¥–∏–Ω –∏–∑ —Ñ–∞–π–ª–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return pd.DataFrame()

    st.write(f"–§–∞–π–ª 1: {files[0].name}")
    merge_col_1 = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞:", df1.columns, key="merge_col_1")

    st.write(f"–§–∞–π–ª 2: {files[1].name}")
    merge_col_2 = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–∞–π–ª–∞:", df2.columns, key="merge_col_2")

    df1[merge_col_1] = df1[merge_col_1].astype(str)
    df2[merge_col_2] = df2[merge_col_2].astype(str)

    df1 = df1.rename(columns={merge_col_1: "_merge_key"})
    df2 = df2.rename(columns={merge_col_2: "_merge_key"})

    # inner join ‚Äî —Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ —Å—Ç—Ä–æ–∫–∏
    result = pd.merge(df1, df2, on="_merge_key", how="inner", suffixes=('', '_dup'))
    result = result.loc[:, ~result.columns.str.endswith('_dup')]
    result = result.loc[:, ~result.columns.str.fullmatch(r'Unnamed.*')]
    result = result.rename(columns={"_merge_key": f"{merge_col_1} / {merge_col_2}"})

    return result

def detect_column_type(series):
    try:
        pd.to_numeric(series.dropna())
        return "numeric"
    except:
        try:
            pd.to_datetime(series.dropna(), errors='raise')
            return "datetime"
        except:
            return "string"

def filter_dataframe():
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", type="csv", key="filter_file")
    if uploaded_file:
        df = load_csv(uploaded_file)
        search_type = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:", ["–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏", "–ü–æ —É—Å–ª–æ–≤–∏—é"])
        if search_type == "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
            column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü", df.columns)
            col_type = detect_column_type(df[column])
            if col_type == "string":
                selected = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è", sorted(df[column].dropna().unique().astype(str)))
                return df[df[column].astype(str).isin(selected)]
            else:
                values = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:").split(',')
                values = [v.strip() for v in values if v.strip()]
                return df[df[column].astype(str).isin(values)]
        elif search_type == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏":
            uploaded = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏", type="csv", key="value_file")
            if uploaded:
                value_df = load_csv(uploaded)
                value_col = st.selectbox("–°—Ç–æ–ª–±–µ—Ü —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏", value_df.columns)
                target_col = st.selectbox("–°—Ç–æ–ª–±–µ—Ü –¥–ª—è –ø–æ–∏—Å–∫–∞", df.columns)
                return df[df[target_col].astype(str).isin(value_df[value_col].astype(str))]
        elif search_type == "–ü–æ —É—Å–ª–æ–≤–∏—é":
            column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü", df.columns)
            col_type = detect_column_type(df[column])
            if col_type == "datetime":
                df[column] = pd.to_datetime(df[column], errors='coerce')
                min_date, max_date = pd.to_datetime(df[column].min()), pd.to_datetime(df[column].max())
                start, end = st.date_input("–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç", [min_date, max_date])
                return df[(df[column] >= pd.to_datetime(start)) & (df[column] <= pd.to_datetime(end))]
            elif col_type == "numeric":
                condition = st.selectbox("–£—Å–ª–æ–≤–∏–µ", ["=", "<", ">", "<=", ">="])
                value = st.text_input("–ó–Ω–∞—á–µ–Ω–∏–µ")
                if value:
                    try:
                        value = float(value)
                        if condition == "=":
                            return df[df[column] == value]
                        elif condition == "<":
                            return df[df[column] < value]
                        elif condition == ">":
                            return df[df[column] > value]
                        elif condition == "<=":
                            return df[df[column] <= value]
                        elif condition == ">=":
                            return df[df[column] >= value]
                    except:
                        st.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
            else:
                selected = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è", sorted(df[column].dropna().unique().astype(str)))
                return df[df[column].astype(str).isin(selected)]
    return None

def download_link(df, filename="—Ä–µ–∑—É–ª—å—Ç–∞—Ç.csv"):
    buffer = BytesIO()
    df.to_csv(buffer, index=False)
    buffer.seek(0)
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", buffer, file_name=filename, mime="text/csv")

def plot_data(df):
    st.subheader("üìà –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞")
    chart_type = st.selectbox("–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞", ["–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", "–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞"])
    group_by = st.multiselect("–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ", df.columns, default=[])
    value_col = st.selectbox("–ê–≥—Ä–µ–≥–∏—Ä—É–µ–º—ã–π —Å—Ç–æ–ª–±–µ—Ü", df.columns)
    agg_func = st.selectbox("–ê–≥—Ä–µ–≥–∞—Ü–∏—è", ["–°—É–º–º–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö", "–°—Ä–µ–¥–Ω–µ–µ"])

    if not group_by:
        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
        return

    for col in group_by:
        if detect_column_type(df[col]) == "datetime":
            df[col] = pd.to_datetime(df[col], errors='coerce').dt.strftime('%Y-%m-%d')

    if agg_func == "–°—É–º–º–∞":
        grouped = df.groupby(group_by)[value_col].sum().reset_index()
    elif agg_func == "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö":
        grouped = df.groupby(group_by)[value_col].nunique().reset_index()
    elif agg_func == "–°—Ä–µ–¥–Ω–µ–µ":
        grouped = df.groupby(group_by)[value_col].mean().reset_index()
    else:
        grouped = df

    fig = None
    color = group_by[1] if len(group_by) > 1 else None

    if chart_type == "–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞":
        fig = px.bar(grouped, x=group_by[0], y=value_col, color=color, barmode='group')
    elif chart_type == "–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫":
        fig = px.line(grouped, x=group_by[0], y=value_col, color=color)
    elif chart_type == "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞":
        fig = px.pie(grouped, names=group_by[0], values=value_col)

    if fig:
        st.plotly_chart(fig, use_container_width=True)

st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
option = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", ["–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ñ–∞–π–ª—ã", "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫"], key="menu_option")

if option == "–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ñ–∞–π–ª—ã":
    uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ 2 CSV —Ñ–∞–π–ª–∞", type="csv", accept_multiple_files=True)
    if uploaded_files:
        merged_df = merge_files(uploaded_files)
        if not merged_df.empty:
            st.dataframe(merged_df)
            download_link(merged_df, "–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ_—Ñ–∞–π–ª—ã.csv")

elif option == "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö":
    filtered_df = filter_dataframe()
    if filtered_df is not None:
        st.dataframe(filtered_df)
        download_link(filtered_df, "–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ.csv")

elif option == "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫":
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª", type="csv", key="plot_file")
    if uploaded_file:
        df = load_csv(uploaded_file)
        plot_data(df)
